### Reference: https://kubernetes.io/docs/concepts/configuration/secret/
### Secret is very similar to ConfigMap. The only difference is that Secret has its 'data' field Base64 encoded. You can either
### supply a Base64 encoded value by yourself (use the 'data' key), or provide a string value that K8s will encode in Base64 for you
### (use the 'stringData' key). Like ConfigMaps, Secrets' key-value pairs can be exporter as env vars or mounted as files in a container.
### As you can see, Secrets do not actually secure your sensitive data, as they are stored unprotected in 'etcd' (if your K8s API server is in a cloud,
### then its disks are likely encrypted with a key managed by the cloud provider). 
### Why use Secrets then? All this starts making sense when you use Role Based Access Control (RBAC) and follow the Principle of Least Privilege.
### You give access to read objects of kind Secret only to those subjects (services) that require it for accomplishing their tasks.
### Also, you can provide an extra layer of security to your Secrets by encrypting them in 'etcd' with the help of an encryption provider, such as AWS KMS.
### Note that anyone who has access to create a Pod can reference a Secret in that Pod, therefore they can read the Secret's content.
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: my-app-secret
  ### 'namespace' means that this Secret can be mounted only on Pods that reside in the same K8s Namespace
  namespace: stateful-apps
stringData:
  ### You won't be storing sensitive data in git. Instead, you will be using something like External-Secrets Operator, AWS-Secret-Operator, etc.
  WORDPRESS_DB_HOST: mysql.stateful-apps.svc.cluster.local
  WORDPRESS_DB_USER: my-app
  WORDPRESS_DB_PASSWORD: qwerty12345
  WORDPRESS_DB_NAME: db_test
  WORDPRESS_TABLE_PREFIX: wp_